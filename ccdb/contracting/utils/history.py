from datetime import datetime

from django.utils import timezone


class MultiModelHistoryIterator:
    """
    This iterator take any numbers of querysets of models which have a attribute `history_date` (like all
    history models generated by `django-simple-history`.
    On each iteration it returns the latest object until all items from all querysets are returned or the
    max_iteration is passed
    """

    # Future improvement: Add some kind of slicing and/or pagination (eg. with itertools.isslice)
    def __init__(self, *args, max_iterations=None):
        """
        We use a dict of the iterators from the queryset together with the latest value.
        We treat a `history_date = self.min_ts` as value for no more items in the queryset.
        """
        self.left_iterations = max_iterations
        self.min_ts = timezone.make_aware(datetime.min, timezone.utc)
        self.resultmap = {
            i.order_by("-history_date").iterator(): i.model(history_date=self.min_ts)
            for i in args
        }

    def __iter__(self):
        return self

    def __next__(self):
        if self.left_iterations is not None and self.left_iterations <= 0:
            raise StopIteration

        # We try to fill the dict with the last values
        for queryset_iterator, item in self.resultmap.items():
            if item.history_date == self.min_ts:
                self.resultmap[queryset_iterator] = next(queryset_iterator, item)

        # If all values are equal to our None value there are no more items to return
        if all(i.history_date == self.min_ts for i in self.resultmap.values()):
            raise StopIteration

        # From out latest values we chose the newest one, remove it from the datastructure and return it
        latest_item = max(self.resultmap.values(), key=lambda x: x.history_date)
        self.resultmap = {
            queryset_iterator: (
                item
                if item != latest_item
                else item._meta.model(history_date=self.min_ts)
            )
            for queryset_iterator, item in self.resultmap.items()
        }
        if self.left_iterations is not None:
            self.left_iterations -= 1
        return latest_item
